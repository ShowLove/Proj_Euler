
pckage entropy;

/*
Each new term in the Fibonacci sequence is generated by adding the previous two 
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not 
exceed four million, find the sum of the even-valued terms.
 */

public class EvenFibNumbs {
	
	public static float[] memo = new float[4000000];
	public static float evens = 0;
	
	public static void main( String [] args )
	{
		System.out.println(evenFibs(33));
		
		System.out.println("evens-->"+evens);
		
	}
	
	
	
	//keep in mind the parameter is n-1
	public static float evenFibs(int num )
	{
		if( num < 2 )
		{
			return 1;
		}
		if( memo[num] != 0 )
		{
			return memo[num];
		}
		
		memo[num] = evenFibs( (num - 1) ) + evenFibs( (num - 2) );
		 
		if(memo[num]%2 == 0 )
		{
			evens += memo[num];
		}
		
		return memo[num];
	}

}
ackage entropy;

/*
Each new term in the Fibonacci sequence is generated by adding the previous two 
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not 
exceed four million, find the sum of the even-valued terms.
 */

public class EvenFibNumbs {
	
	public static float[] memo = new float[4000000];
	public static float evens = 0;
	
	public static void main( String [] args )
	{
		System.out.println(evenFibs(33));
		
		System.out.println("evens-->"+evens);
		
	}
	
	
	
	//keep in mind the parameter is n-1
	public static float evenFibs(int num )
	{
		if( num < 2 )
		{
			return 1;
		}
		if( memo[num] != 0 )
		{
			return memo[num];
		}
		
		memo[num] = evenFibs( (num - 1) ) + evenFibs( (num - 2) );
		 
		if(memo[num]%2 == 0 )
		{
			evens += memo[num];
		}
		
		return memo[num];
	}

}